import{r as e,o as n,a,b as s,F as t,d as o,c as l}from"./app.e02cfe6d.js";const r={},i=s("h1",{id:"running-code"},[s("a",{class:"header-anchor",href:"#running-code"},"#"),o(" Running Code")],-1),u=s("p",null,"In this section, we will:",-1),c=s("li",null,"Learn about the abstractions Kubernetes uses to run lots of pods at once",-1),p=o("Start a little demo application called "),d={href:"https://github.com/stefanprodan/podinfo",target:"_blank",rel:"noopener noreferrer"},m=o("podinfo"),h=s("li",null,"Start a shell inside the deployed app and play around with it",-1),b=s("li",null,"Scale the app up and down",-1),g=s("li",null,"Deploy a new version of the app",-1),y=s("p",null,[o("Kubernetes runs code in the form of "),s("strong",null,"containers"),o(" using "),s("strong",null,"images"),o(" as the starting point. So thoroughout this section, we'll be talking about containers and images a lot.")],-1),f={class:"custom-container tip"},k=s("p",{class:"custom-container-title"},"What's a container?",-1),w=o("A "),P={href:"https://www.docker.com/resources/what-container",target:"_blank",rel:"noopener noreferrer"},v=o("container"),S=o(" is a form of packaging code so that you can run it in the same way on lots of different systems. A container is mostly the same thing as a "),T=s("strong",null,"Docker container",-1),x=o(" – you can consider them to be the same for now."),D=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"What's an image?"),s("p",null,'An image is a snapshot of a container, ready to run, but without any state. Think of an image as a container that\'s never been started. We use this image as a "template," make a copy of it, and call the copy a container.')],-1),I=s("p",null,"While this section focuses on running ready-built Docker containers inside a Kubernetes cluster, you may find value in learning the following so you can build and deploy your own app:",-1),R=o("Pull an image from "),N={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},W=o("Docker Hub"),A=s("li",null,"Run a Docker image locally",-1),C=s("li",null,[o("Package a project into a tagged Docker image using "),s("code",null,"docker build"),o(" with a "),s("code",null,"Dockerfile")],-1),E=s("li",null,"Push a tagged Docker image to a registry",-1),L=s("p",null,"If you're interested in learning more Docker skills, check out these resources:",-1),K={href:"https://www.docker.com/101-tutorial",target:"_blank",rel:"noopener noreferrer"},_=o("Official Docker 101 Tutorial"),M=o(": An interactive tutorial that you can run in Docker locally or in a ready-to-go cloud environment"),j={href:"https://docker-curriculum.com/",target:"_blank",rel:"noopener noreferrer"},F=o("Docker Curriculum"),O=o(": A straightforward tutorial that covers building your first Docker app and putting it online via AWS Elastic Container Service"),q=s("p",null,"OK, let's get started!",-1),z=s("h2",{id:"introducing-the-podinfo-app"},[s("a",{class:"header-anchor",href:"#introducing-the-podinfo-app"},"#"),o(" Introducing the podinfo app")],-1),V={href:"https://github.com/stefanprodan/podinfo",target:"_blank",rel:"noopener noreferrer"},Y=o("Podinfo"),B=o(" is a Hello World-style application. It displays a cute logo, shows some stats about the system on which it's running, and lets you ping it to show that it's answering web requests in realtime."),G=s("p",null,"We will deploy this podinfo app to your cluster. If you want to try it locally, you can run:",-1),H=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,[o("docker run -it -p "),s("span",{class:"token number"},"9898"),o(":9898 stefanprodan/podinfo\n")])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br")])],-1),$=s("p",null,"Then visit http://localhost:9898 to see the cuttlefish:",-1),J=s("p",null,[s("img",{src:"/dangerkube/assets/podinfo.c40db6c3.png",alt:"podinfo cuttlefish"})],-1),U=s("h2",{id:"pods"},[s("a",{class:"header-anchor",href:"#pods"},"#"),o(" Pods")],-1),Q=o("When Kubernetes needs to run a container, it packages one or more containers into a "),X=s("strong",null,"Pod",-1),Z=o(". The "),ee={href:"https://kubernetes.io/docs/concepts/workloads/pods/",target:"_blank",rel:"noopener noreferrer"},ne=o("Kubernetes docs"),ae=o(' suggest that you can think of a Pod "as in a pod of whales or a pea pod."'),se=s("p",null,"In this section, we will only run one container in each Pod. In the field, you might see multiple containers in the same Pod.",-1),te=s("details",{class:"custom-container details"},[s("summary",null,"Why would I want to run multiple containers in one Pod?"),s("p",null,"When containers share a Pod, they:"),s("ul",null,[s("li",null,[s("strong",null,"share"),o(" network resources")]),s("li",null,[o("can "),s("strong",null,"share"),o(" filesystem mounts, allowing them to use the same directories cooperatively")]),s("li",null,[s("strong",null,"do not"),o(" share CPU quotas")]),s("li",null,[s("strong",null,"do not"),o(" share memory quotas")])]),s("p",null,"In a Pod with multiple containers, an auxiliary container often provides one of the following features to an app container:"),s("ul",null,[s("li",null,"authenticated database access"),s("li",null,"some kind of frontend, such as an nginx webserver or proxy"),s("li",null,"log forwarding"),s("li",null,"metric capturing")])],-1),oe=s("p",null,"A Pod's job is to make sure that its containers start up and stay up. If a container crashes, the Pod is responsible for restarting it. But a Pod only knows about each of its container instances, and a Pod can't be split among Nodes of your cluster.",-1),le=s("p",null,"If you only run one Pod for your app, and the pod is running on a Node, and that Node crashes, your app goes offline.",-1),re=s("h2",{id:"let-s-run-a-pod"},[s("a",{class:"header-anchor",href:"#let-s-run-a-pod"},"#"),o(" Let's Run a Pod")],-1),ie=s("p",null,"We're going to build the YAML for a Pod by hand and run this Pod in your cluster.",-1),ue=s("p",null,[o("Save this into a file called "),s("code",null,"pod.yaml"),o(":")],-1),ce=s("div",{class:"language-yaml ext-yml line-numbers-mode"},[s("pre",{class:"language-yaml"},[s("code",null,[s("span",{class:"token key atrule"},"apiVersion"),s("span",{class:"token punctuation"},":"),o(" v1\n"),s("span",{class:"token key atrule"},"kind"),s("span",{class:"token punctuation"},":"),o(" Pod\n"),s("span",{class:"token key atrule"},"metadata"),s("span",{class:"token punctuation"},":"),o("\n  "),s("span",{class:"token key atrule"},"name"),s("span",{class:"token punctuation"},":"),o(" my"),s("span",{class:"token punctuation"},"-"),o("podinfo\n"),s("span",{class:"token key atrule"},"spec"),s("span",{class:"token punctuation"},":"),o("\n  "),s("span",{class:"token key atrule"},"containers"),s("span",{class:"token punctuation"},":"),o("\n    "),s("span",{class:"token punctuation"},"-"),o(),s("span",{class:"token key atrule"},"name"),s("span",{class:"token punctuation"},":"),o(" my"),s("span",{class:"token punctuation"},"-"),o("container\n      "),s("span",{class:"token key atrule"},"image"),s("span",{class:"token punctuation"},":"),o(" stefanprodan/podinfo"),s("span",{class:"token punctuation"},":"),o("latest\n      "),s("span",{class:"token key atrule"},"ports"),s("span",{class:"token punctuation"},":"),o("\n        "),s("span",{class:"token punctuation"},"-"),o(),s("span",{class:"token key atrule"},"containerPort"),s("span",{class:"token punctuation"},":"),o(),s("span",{class:"token number"},"9898"),o("\n")])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br")])],-1),pe=s("p",null,"Then apply it using kubectl:",-1),de=s("div",{class:"language-text ext-text line-numbers-mode"},[s("pre",{class:"language-text"},[s("code",null,"$ kubectl apply -f pod.yaml\n\npod/my-podinfo created\n")]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br")])],-1),me=s("p",null,"Finally, check the status of your cluster:",-1),he=s("div",{class:"language-text ext-text line-numbers-mode"},[s("pre",{class:"language-text"},[s("code",null,"$ kubectl get pods\n\nNAME         READY   STATUS    RESTARTS   AGE\nmy-podinfo   1/1     Running   0          10s\n")]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br")])],-1),be=s("p",null,[o("Great! You've created a pod named "),s("code",null,"my-podinfo"),o(". Let's inspect it more closely with "),s("code",null,"kubectl describe"),o(", a tool you can use to get detailed information about almost any resource:")],-1),ge=s("div",{class:"language-text ext-text line-numbers-mode"},[s("pre",{class:"language-text"},[s("code",null,'$ kubectl describe pod my-podinfo\n\nName:         my-podinfo\nNamespace:    default\nPriority:     0\nNode:         docker-desktop/192.168.65.4\nStart Time:   Wed, 02 Jun 2021 20:08:46 -0600\nLabels:       <none>\nAnnotations:  <none>\nStatus:       Running\nIP:           10.1.0.10\nIPs:\n  IP:  10.1.0.10\nContainers:\n  my-container:\n    Container ID:   docker://1b9fa18cb68e79493f8d6db4ed53fc141fb08a10bde5a1794d8312597966b9dd\n    Image:          stefanprodan/podinfo:latest\n    Image ID:       docker-pullable://stefanprodan/podinfo@sha256:119b9b2db4e0e604b96f95976b85b120bc88a104cd908d7a8874d356e6067a4b\n    Port:           9898/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Wed, 02 Jun 2021 20:08:49 -0600\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-zgsgh (ro)\nConditions:\n  Type              Status\n  Initialized       True\n  Ready             True\n  ContainersReady   True\n  PodScheduled      True\nVolumes:\n  default-token-zgsgh:\n    Type:        Secret (a volume populated by a Secret)\n    SecretName:  default-token-zgsgh\n    Optional:    false\nQoS Class:       BestEffort\nNode-Selectors:  <none>\nTolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  19s   default-scheduler  Successfully assigned default/my-podinfo to docker-desktop\n  Normal  Pulling    17s   kubelet            Pulling image "stefanprodan/podinfo:latest"\n  Normal  Pulled     16s   kubelet            Successfully pulled image "stefanprodan/podinfo:latest" in 930.767834ms\n  Normal  Created    16s   kubelet            Created container my-container\n  Normal  Started    16s   kubelet            Started container my-container\n')]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br"),s("span",{class:"line-number"},"8"),s("br"),s("span",{class:"line-number"},"9"),s("br"),s("span",{class:"line-number"},"10"),s("br"),s("span",{class:"line-number"},"11"),s("br"),s("span",{class:"line-number"},"12"),s("br"),s("span",{class:"line-number"},"13"),s("br"),s("span",{class:"line-number"},"14"),s("br"),s("span",{class:"line-number"},"15"),s("br"),s("span",{class:"line-number"},"16"),s("br"),s("span",{class:"line-number"},"17"),s("br"),s("span",{class:"line-number"},"18"),s("br"),s("span",{class:"line-number"},"19"),s("br"),s("span",{class:"line-number"},"20"),s("br"),s("span",{class:"line-number"},"21"),s("br"),s("span",{class:"line-number"},"22"),s("br"),s("span",{class:"line-number"},"23"),s("br"),s("span",{class:"line-number"},"24"),s("br"),s("span",{class:"line-number"},"25"),s("br"),s("span",{class:"line-number"},"26"),s("br"),s("span",{class:"line-number"},"27"),s("br"),s("span",{class:"line-number"},"28"),s("br"),s("span",{class:"line-number"},"29"),s("br"),s("span",{class:"line-number"},"30"),s("br"),s("span",{class:"line-number"},"31"),s("br"),s("span",{class:"line-number"},"32"),s("br"),s("span",{class:"line-number"},"33"),s("br"),s("span",{class:"line-number"},"34"),s("br"),s("span",{class:"line-number"},"35"),s("br"),s("span",{class:"line-number"},"36"),s("br"),s("span",{class:"line-number"},"37"),s("br"),s("span",{class:"line-number"},"38"),s("br"),s("span",{class:"line-number"},"39"),s("br"),s("span",{class:"line-number"},"40"),s("br"),s("span",{class:"line-number"},"41"),s("br"),s("span",{class:"line-number"},"42"),s("br"),s("span",{class:"line-number"},"43"),s("br"),s("span",{class:"line-number"},"44"),s("br"),s("span",{class:"line-number"},"45"),s("br"),s("span",{class:"line-number"},"46"),s("br"),s("span",{class:"line-number"},"47"),s("br"),s("span",{class:"line-number"},"48"),s("br"),s("span",{class:"line-number"},"49"),s("br"),s("span",{class:"line-number"},"50"),s("br")])],-1),ye=s("p",null,"OK, that's a lot of info. What does it mean? Let's go over it from top to bottom, skipping the parts that don't matter much right now.",-1),fe=s("li",null,[s("strong",null,"Name:"),o(" This pod is named "),s("code",null,"my-podinfo"),o(", just like you wrote in your YAML spec.")],-1),ke=s("strong",null,"Namespace:",-1),we=o(" Every resource in Kubernetes lives in a "),Pe={href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",target:"_blank",rel:"noopener noreferrer"},ve=o("namespace"),Se=o(". Resources in different namespaces are usually isolated from one another. Since you didn't specify a namespace in your Pod spec, your Pod was created in the "),Te=s("code",null,"default",-1),xe=o(" namespace."),De=l("<li><strong>Labels</strong>: Labels are a way to tag resources so that other pieces of cluster infrastructure can understand them. For example, you might add a Label to a Pod such as <code>example.com/log-aggregation: enabled</code>, and this might tell tell another piece of infrastructure to capture this Pod&#39;s logs and send them to your third-party logging system.</li><li><strong>Annotations:</strong> Annotations are a way to tag resources so that humans can understand them. For example, you might have a Deployment, a Service, and an Ingress for one of your applications, and you might add a Label to each one such as <code>app: my-cool-web-service</code> so that you can query for all resources that belong to <code>my-cool-web-service</code>.</li><li><strong>IP:</strong> Each Pod on a Node has an IP address. This is a private IP inside the cluster network, and you can use it to talk to this Pod from other Pods inside the cluster. But it&#39;s easier to use a Service to talk to your Pods. We&#39;ll discuss Services in a future section.</li><li><strong>Containers:</strong> This describes each container in your pod, what image it&#39;s running, its current state, and how many times it&#39;s restarted since you started this pod. Containers restart when they exit or crash, so if the restart count is high, your container might be crashing a lot.</li><li><strong>Conditions:</strong> These describe the current state of your Pod and help you understand when something is going wrong.</li><li><strong>Volumes:</strong> These allow you to mount data into your Pod from an external source, such as a ConfigMap or Secret. We&#39;ll discuss Volumes in a future section.</li><li><strong>Events:</strong> These act as a timeline to show what happened with your Pod, from when your pod is scheduled onto a Node until the containers start successfully. If your Pod&#39;s containers are crashing and rebooting, the Events section is where you will usually learn about it.</li>",7),Ie=s("h2",{id:"replicasets"},[s("a",{class:"header-anchor",href:"#replicasets"},"#"),o(" ReplicaSets")],-1),Re=s("p",null,[o("A "),s("strong",null,"ReplicaSet"),o(" acts as a supervisor to ensure Pods are online and working properly. Its responsibility is to ensure the Pod you specified is running and your Pod has the right number of "),s("strong",null,"replicas"),o(" online.")],-1),Ne=s("p",null,"If you start a Pod on its own, Kubernetes might destroy your Pod in the case of a Node crash or a disruptive Node upgrade. So we don't run Pods on their own for real apps. We use ReplicaSets, which are durable, to manage Pods, which are sort of transient.",-1),We=s("p",null,"Generally, we don't manage ReplicaSets directly. We use Deployments to manage ReplicaSets which manage our Pods. We tell you about ReplicaSets here because you'll see them used when you start working with Deployments.",-1),Ae=s("h2",{id:"deployments"},[s("a",{class:"header-anchor",href:"#deployments"},"#"),o(" Deployments")],-1),Ce=s("p",null,[o("A "),s("strong",null,"Deployment"),o(" manages ReplicaSets in a declarative way:")],-1),Ee=s("ul",null,[s("li",null,[o("When you need "),s("strong",null,"more or less Pods"),o(", you change the replica count in the Deployment spec. The Deployment updates the underlying ReplicaSet's replica count for you.")]),s("li",null,[o("When you need a "),s("strong",null,"different image"),o(" running in your Pod, you change the Pod spec in the Deployment spec. The Deployment performs a "),s("strong",null,"rollout"),o(" to create a new ReplicaSet and pods, and destroy the old ReplicaSet and pods, without interrupting your application's uptime.")]),s("li",null,[o("When you want to change "),s("strong",null,"lots of things"),o(" at once, you simply change the Deployment spec. The Deployment takes care of the changes that need to be made without you having to worry about the details.")])],-1);r.render=function(o,l){const r=e("OutboundLink");return n(),a(t,null,[i,u,s("ul",null,[c,s("li",null,[p,s("a",d,[m,s(r)])]),h,b,g]),y,s("div",f,[k,s("p",null,[w,s("a",P,[v,s(r)]),S,T,x])]),D,I,s("ul",null,[s("li",null,[R,s("a",N,[W,s(r)])]),A,C,E]),L,s("ul",null,[s("li",null,[s("a",K,[_,s(r)]),M]),s("li",null,[s("a",j,[F,s(r)]),O])]),q,z,s("p",null,[s("a",V,[Y,s(r)]),B]),G,H,$,J,U,s("p",null,[Q,X,Z,s("a",ee,[ne,s(r)]),ae]),se,te,oe,le,re,ie,ue,ce,pe,de,me,he,be,ge,ye,s("ul",null,[fe,s("li",null,[ke,we,s("a",Pe,[ve,s(r)]),Se,Te,xe]),De]),Ie,Re,Ne,We,Ae,Ce,Ee],64)};export default r;
